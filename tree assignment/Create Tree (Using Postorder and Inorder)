import java.util.*;
public class Main {

	static Scanner scn = new Scanner(System.in);

	public static void main(String[] args) {
		Main m = new Main();
		int[] post = takeInput();
		int[] in = takeInput();
		BinaryTree bt = m.new BinaryTree(post, in);
		bt.display();
	}

	public static int[] takeInput() {
		int n = scn.nextInt();

		int[] rv = new int[n];
		for (int i = 0; i < rv.length; i++) {
			rv[i] = scn.nextInt();
		}

		return rv;
	}

	private class BinaryTree {
		private class Node {
			int data;
			Node left;
			Node right;
		}

		private Node root;
		private int size;

		public BinaryTree(int[] post, int[] in) {
			this.root = this.buildUtil(in,post, 0, in.length - 1, 0, post.length - 1);
		}

		private Node buildUtil(int[] in,int[] post, int ilo, int ihi, int plo, int phi) {

			// write your code here
			 if (ilo > ihi)
            return null;
        Node node = new Node();
		node.data=post[phi];
        if (ilo == ihi)
            return node;
        int iIndex = search(in, ilo, ihi, node.data);
        node.left = buildUtil(
            in, post, ilo, iIndex - 1, plo,
            plo - ilo + iIndex - 1);
        node.right = buildUtil(in, post, iIndex + 1, ihi,
                               phi - ihi + iIndex,
                               phi - 1);
 
 
        return node;
			
		}

		   int search(int arr[], int strt, int end, int value)
    {
        int i;
        for (i = strt; i <= end; i++) {
            if (arr[i] == value)
                break;
        }
        return i;
    }

		public void display() {
			this.display(this.root);
		}

		private void display(Node node) {
			if (node == null) {
				return;
			}

			String str = "";

			if (node.left != null) {
				str += node.left.data;
			} else {
				str += "END";
			}

			str += " => " + node.data + " <= ";

			if (node.right != null) {
				str += node.right.data;
			} else {
				str += "END";
			}

			System.out.println(str);

			this.display(node.left);
			this.display(node.right);
		}

	}

}
