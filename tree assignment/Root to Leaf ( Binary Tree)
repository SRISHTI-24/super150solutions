import java.util.*;
public class Main {

    static Scanner scn = new Scanner(System.in);

    public static void main(String[] args) {
        Main m = new Main();
        BinaryTree bt1 = m.new BinaryTree();
        List<Integer> ans= bt1.pathSum(bt1.root, scn.nextInt()).get(0);
        for(int i : ans) System.out.print(i+" ");
    }

    private class BinaryTree {
        private class Node {
            int data;
            Node left;
            Node right;
        }

        private Node root;
        private int size;

        public BinaryTree() {
            this.root = this.takeInput(null, false);
        }

        public Node takeInput(Node parent, boolean ilc) {

            int cdata = scn.nextInt();
            Node child = new Node();
            child.data = cdata;
            this.size++;

            // left
            boolean hlc = scn.nextBoolean();

            if (hlc) {
                child.left = this.takeInput(child, true);
            }

            // right
            boolean hrc = scn.nextBoolean();

            if (hrc) {
                child.right = this.takeInput(child, false);
            }

            // return
            return child;
        }

        public List<List<Integer>> pathSum(Node root, int targetSum) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> help = new ArrayList<>();
        help(root, targetSum, help, res);
        return res;
    }
    private void help(Node root, int ts,List<Integer> l, List<List<Integer>> res){
        if(root == null){
            return;
        }
        if(root.left == null && root.right == null){
            if(ts -root.data == 0){
                l.add(root.data);
                res.add(new ArrayList<>(l));
                l.remove(l.size()-1);
            }
            return;
        }
        if(root.left != null){
            l.add(root.data);
            help(root.left, ts-root.data, l, res);
            l.remove(l.size()-1);
        }
        if(root.right != null){
            l.add(root.data);
            help(root.right, ts-root.data, l, res);
            l.remove(l.size()-1);
        }
    }
    }

}
