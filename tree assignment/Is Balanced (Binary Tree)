import java.util.*;
public class Main {

	static Scanner s = new Scanner(System.in);
    static boolean ck = true;
	public static void main(String[] args) {
		Main mm = new Main();
		BinaryTree bt = mm.new BinaryTree();
		System.out.println(bt.isBalanced());
	}

	private class BinaryTree {
		private class Node {
			int data;
			Node left;
			Node right;
		}

		private Node root;
		private int size;

		public BinaryTree() {
			this.root = this.takeInput(null, false);
		}

		public Node takeInput(Node parent, boolean ilc) {

			int cd = s.nextInt();
			Node child = new Node();
			child.data = cd;
			this.size++;

			// left
			boolean cl = s.nextBoolean();

			if (cl) {
				child.left = this.takeInput(child, true);
			}

			// right
			boolean cr = s.nextBoolean();

			if (cr) {
				child.right = this.takeInput(child, false);
			}

			// return
			return child;
		}

		public boolean isBalanced() {
			return this.isBalanced(this.root).isBalanced;
		}

		private BalancedPair isBalanced(Node node) {
			// write your code here
            BalancedPair p = new BalancedPair();
            p.height = balancecheck(root,0);
            p.isBalanced = ck;
            return p;	
		}
        private int balancecheck(Node root,int depth){
            if(root == null)
                return depth;
            
            int left= balancecheck(root.left,depth+1);
            int right= balancecheck(root.right,depth+1);

            if(Math.abs(left-right)>1)
                ck = false;
            
            return Math.max(left,right);
        }

		private class BalancedPair {
			int height;
			boolean isBalanced;
		}

	}
}
